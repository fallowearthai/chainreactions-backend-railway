import request from 'supertest';\nimport express from 'express';\nimport { DatasetSearchController } from '../../controllers/DatasetSearchController';\nimport { SupabaseNROService } from '../../services/SupabaseNROService';\nimport { LinkupSearchService } from '../../services/LinkupSearchService';\nimport { SearchHistoryService } from '../../services/SearchHistoryService';\n\n// Mock services to avoid actual API calls during testing\njest.mock('../../services/SupabaseNROService');\njest.mock('../../services/LinkupSearchService');\njest.mock('../../services/SearchHistoryService');\njest.mock('../../services/SSEService', () => ({\n  sseService: {\n    createConnection: jest.fn().mockReturnValue('conn-123'),\n    sendProgress: jest.fn(),\n    sendNewResult: jest.fn(),\n    sendCompletion: jest.fn(),\n    sendError: jest.fn(),\n    closeExecutionConnections: jest.fn(),\n    getActiveConnectionsCount: jest.fn().mockReturnValue(0)\n  }\n}));\n\nconst MockedSupabaseNROService = SupabaseNROService as jest.MockedClass<typeof SupabaseNROService>;\nconst MockedLinkupSearchService = LinkupSearchService as jest.MockedClass<typeof LinkupSearchService>;\nconst MockedSearchHistoryService = SearchHistoryService as jest.MockedClass<typeof SearchHistoryService>;\n\n// Create test app\nfunction createTestApp() {\n  const app = express();\n  app.use(express.json());\n  \n  const controller = new DatasetSearchController();\n  \n  // Add routes\n  app.post('/api/dataset-search/stream', controller.streamSearch);\n  app.delete('/api/dataset-search/stream/:execution_id', controller.cancelStreamSearch);\n  app.get('/api/dataset-search/stream/:execution_id/status', controller.getStreamSearchStatus);\n  app.get('/api/dataset-search/nro-stats', controller.getNROStats);\n  app.get('/api/health', controller.healthCheck);\n  \n  return app;\n}\n\ndescribe('Dataset Search Integration Tests', () => {\n  let app: express.Application;\n  let mockNroService: jest.Mocked<SupabaseNROService>;\n  let mockLinkupService: jest.Mocked<LinkupSearchService>;\n  let mockHistoryService: jest.Mocked<SearchHistoryService>;\n\n  beforeEach(() => {\n    app = createTestApp();\n    \n    // Setup mocks\n    mockNroService = new MockedSupabaseNROService() as jest.Mocked<SupabaseNROService>;\n    mockLinkupService = new MockedLinkupSearchService() as jest.Mocked<LinkupSearchService>;\n    mockHistoryService = new MockedSearchHistoryService() as jest.Mocked<SearchHistoryService>;\n    \n    // Reset all mocks\n    jest.clearAllMocks();\n  });\n\n  describe('POST /api/dataset-search/stream', () => {\n    it('should initiate SSE stream search successfully', async () => {\n      // Mock successful NRO data fetch\n      const mockNroData = [\n        {\n          id: '1',\n          organization_name: 'Test University',\n          countries: ['China'],\n          dataset_source: 'Canadian NRO'\n        },\n        {\n          id: '2',\n          organization_name: 'Research Institute',\n          countries: ['Iran'],\n          dataset_source: 'Canadian NRO'\n        }\n      ];\n      \n      mockNroService.getCanadianNRO.mockResolvedValue(mockNroData);\n      mockHistoryService.createSearchHistory.mockResolvedValue({\n        id: 'hist-123',\n        user_id: 'test-user',\n        target_institution: 'Test Institution',\n        keywords: [],\n        search_results: [],\n        execution_status: 'pending',\n        execution_id: expect.any(String),\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      });\n      \n      const response = await request(app)\n        .post('/api/dataset-search/stream')\n        .send({\n          target_institution: 'Test Institution',\n          user_id: 'test-user'\n        });\n      \n      // For SSE, we expect headers to be set and stream to start\n      expect(response.status).toBe(200);\n      expect(response.headers['content-type']).toBe('text/event-stream; charset=utf-8');\n      \n      // Verify services were called\n      expect(mockNroService.getCanadianNRO).toHaveBeenCalled();\n      expect(mockHistoryService.createSearchHistory).toHaveBeenCalledWith(\n        expect.objectContaining({\n          user_id: 'test-user',\n          target_institution: 'Test Institution'\n        })\n      );\n    });\n\n    it('should return error when no institution provided', async () => {\n      const response = await request(app)\n        .post('/api/dataset-search/stream')\n        .send({\n          user_id: 'test-user'\n          // Missing target_institution\n        });\n      \n      expect(response.status).toBe(400);\n      expect(response.body).toMatchObject({\n        success: false,\n        error: expect.stringContaining('target_institution')\n      });\n    });\n\n    it('should handle NRO service failure', async () => {\n      mockNroService.getCanadianNRO.mockRejectedValue(new Error('Database connection failed'));\n      \n      const response = await request(app)\n        .post('/api/dataset-search/stream')\n        .send({\n          target_institution: 'Test Institution',\n          user_id: 'test-user'\n        });\n      \n      expect(response.status).toBe(500);\n      expect(response.body).toMatchObject({\n        success: false,\n        error: expect.stringContaining('Database connection failed')\n      });\n    });\n\n    it('should handle empty NRO data', async () => {\n      mockNroService.getCanadianNRO.mockResolvedValue([]);\n      \n      const response = await request(app)\n        .post('/api/dataset-search/stream')\n        .send({\n          target_institution: 'Test Institution',\n          user_id: 'test-user'\n        });\n      \n      expect(response.status).toBe(500);\n      expect(response.body).toMatchObject({\n        success: false,\n        error: expect.stringContaining('No Canadian NRO organizations found')\n      });\n    });\n  });\n\n  describe('GET /api/dataset-search/nro-stats', () => {\n    it('should return NRO statistics', async () => {\n      const mockStats = {\n        total: 103,\n        byCountry: {\n          China: 85,\n          Iran: 12,\n          Russia: 6\n        },\n        categories: {}\n      };\n      \n      mockNroService.getNROStatistics.mockResolvedValue(mockStats);\n      \n      const response = await request(app)\n        .get('/api/dataset-search/nro-stats');\n      \n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        success: true,\n        stats: mockStats\n      });\n    });\n\n    it('should handle NRO statistics service failure', async () => {\n      mockNroService.getNROStatistics.mockRejectedValue(new Error('Stats unavailable'));\n      \n      const response = await request(app)\n        .get('/api/dataset-search/nro-stats');\n      \n      expect(response.status).toBe(500);\n    });\n  });\n\n  describe('GET /api/health', () => {\n    it('should return health status with all dependencies', async () => {\n      mockNroService.testConnection.mockResolvedValue(true);\n      mockLinkupService.testConnection.mockResolvedValue(true);\n      \n      const response = await request(app)\n        .get('/api/health');\n      \n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        status: 'healthy',\n        service: 'Dataset Search Service',\n        version: '2.0.0',\n        dependencies: {\n          supabase: 'healthy',\n          linkup: 'healthy'\n        }\n      });\n    });\n\n    it('should show unhealthy dependencies', async () => {\n      mockNroService.testConnection.mockResolvedValue(false);\n      mockLinkupService.testConnection.mockResolvedValue(false);\n      \n      const response = await request(app)\n        .get('/api/health');\n      \n      expect(response.status).toBe(200);\n      expect(response.body.dependencies).toMatchObject({\n        supabase: 'unhealthy',\n        linkup: 'unhealthy'\n      });\n    });\n  });\n\n  describe('DELETE /api/dataset-search/stream/:execution_id', () => {\n    it('should return 404 for non-existent execution', async () => {\n      const response = await request(app)\n        .delete('/api/dataset-search/stream/non-existent-id');\n      \n      expect(response.status).toBe(404);\n      expect(response.body).toMatchObject({\n        success: false\n      });\n    });\n  });\n\n  describe('GET /api/dataset-search/stream/:execution_id/status', () => {\n    it('should return 404 for non-existent execution', async () => {\n      mockHistoryService.getSearchHistoryByExecutionId.mockResolvedValue(null);\n      \n      const response = await request(app)\n        .get('/api/dataset-search/stream/non-existent-id/status');\n      \n      expect(response.status).toBe(404);\n      expect(response.body).toMatchObject({\n        success: false\n      });\n    });\n\n    it('should return execution status from database', async () => {\n      const mockHistoryItem = {\n        id: 'hist-123',\n        user_id: 'test-user',\n        target_institution: 'Test Institution',\n        keywords: [],\n        search_results: [{\n          risk_item: 'Test Entity',\n          relationship_type: 'Direct' as const,\n          finding_summary: 'Test finding',\n          intermediary_organizations: [],\n          source_urls: [],\n          completed_at: '2024-01-01T00:00:00.000Z'\n        }],\n        execution_status: 'completed' as const,\n        execution_id: 'exec-123',\n        created_at: '2024-01-01T00:00:00.000Z',\n        updated_at: '2024-01-01T00:10:00.000Z'\n      };\n      \n      mockHistoryService.getSearchHistoryByExecutionId.mockResolvedValue(mockHistoryItem);\n      \n      const response = await request(app)\n        .get('/api/dataset-search/stream/exec-123/status');\n      \n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        success: true,\n        execution_id: 'exec-123',\n        status: 'completed',\n        results_count: 1\n      });\n    });\n  });\n\n  describe('Input validation', () => {\n    it('should validate institution name length', async () => {\n      const response = await request(app)\n        .post('/api/dataset-search/stream')\n        .send({\n          target_institution: '', // Empty string\n          user_id: 'test-user'\n        });\n      \n      expect(response.status).toBe(400);\n    });\n\n    it('should validate institution name maximum length', async () => {\n      const longName = 'a'.repeat(201); // Exceeds 200 character limit\n      \n      const response = await request(app)\n        .post('/api/dataset-search/stream')\n        .send({\n          target_institution: longName,\n          user_id: 'test-user'\n        });\n      \n      expect(response.status).toBe(400);\n    });\n\n    it('should validate execution ID format in params', async () => {\n      const response = await request(app)\n        .get('/api/dataset-search/stream/invalid-format/status');\n      \n      // Note: This depends on the validateExecutionId implementation\n      // Adjust expectation based on actual validation logic\n      expect(response.status).toBe(400);\n    });\n  });\n\n  describe('Error handling', () => {\n    it('should handle unexpected errors gracefully', async () => {\n      // Mock an unexpected error in the service\n      mockNroService.getCanadianNRO.mockImplementation(() => {\n        throw new Error('Unexpected error');\n      });\n      \n      const response = await request(app)\n        .post('/api/dataset-search/stream')\n        .send({\n          target_institution: 'Test Institution',\n          user_id: 'test-user'\n        });\n      \n      expect(response.status).toBe(500);\n      expect(response.body).toMatchObject({\n        success: false,\n        error: expect.any(String)\n      });\n    });\n  });\n});