import { LinkupResponseParser } from '../services/LinkupResponseParser';\nimport { LinkupApiResponse } from '../types/DatasetSearchTypes';\n\ndescribe('LinkupResponseParser', () => {\n  describe('parseResponse', () => {\n    it('should parse JSON from code block format', () => {\n      const response: LinkupApiResponse = {\n        answer: `\nBased on my analysis, here are the findings:\n\n\\`\\`\\`json\n{\n  \"risk_item\": \"Test Entity\",\n  \"relationship_type\": \"Direct\",\n  \"finding_summary\": \"Clear partnership found\",\n  \"intermediary_organizations\": [\"Partner Org\"],\n  \"source_urls\": [\"https://example.com/news\"]\n}\n\\`\\`\\`\n\nThis shows a direct relationship.`,\n        sources: [\n          { name: 'Example News', url: 'https://example.com/news', snippet: 'Partnership announcement' }\n        ]\n      };\n\n      const result = LinkupResponseParser.parseResponse(response, 'Test Entity');\n\n      expect(result.risk_item).toBe('Test Entity');\n      expect(result.relationship_type).toBe('Direct');\n      expect(result.finding_summary).toBe('Clear partnership found');\n      expect(result.intermediary_organizations).toEqual(['Partner Org']);\n      expect(result.source_urls).toContain('https://example.com/news');\n    });\n\n    it('should parse JSON from generic code block', () => {\n      const response: LinkupApiResponse = {\n        answer: `Analysis results:\n\n\\`\\`\\`\n{\n  \"risk_item\": \"Another Entity\",\n  \"relationship_type\": \"Indirect\",\n  \"finding_summary\": \"Connection through subsidiary\"\n}\n\\`\\`\\``,\n        sources: []\n      };\n\n      const result = LinkupResponseParser.parseResponse(response, 'Another Entity');\n\n      expect(result.risk_item).toBe('Another Entity');\n      expect(result.relationship_type).toBe('Indirect');\n      expect(result.finding_summary).toBe('Connection through subsidiary');\n    });\n\n    it('should create fallback result when JSON parsing fails', () => {\n      const response: LinkupApiResponse = {\n        answer: `No evidence of any relationship was found between the institutions. \nThere are no documented partnerships, collaborations, or connections.`,\n        sources: [\n          { name: 'Source 1', url: 'https://source1.com', snippet: 'No connection' }\n        ]\n      };\n\n      const result = LinkupResponseParser.parseResponse(response, 'Unknown Entity');\n\n      expect(result.risk_item).toBe('Unknown Entity');\n      expect(result.relationship_type).toBe('No Evidence Found');\n      expect(result.source_urls).toContain('https://source1.com');\n    });\n\n    it('should handle malformed JSON gracefully', () => {\n      const response: LinkupApiResponse = {\n        answer: `\\`\\`\\`json\n{\n  \"risk_item\": \"Bad JSON\",\n  \"relationship_type\": \"Direct\"\n  // Missing closing brace\n\\`\\`\\``,\n        sources: []\n      };\n\n      const result = LinkupResponseParser.parseResponse(response, 'Bad JSON');\n\n      expect(result.risk_item).toBe('Bad JSON');\n      expect(result.relationship_type).toBe('Unknown'); // Fallback\n    });\n\n    it('should validate relationship types', () => {\n      const response: LinkupApiResponse = {\n        answer: `\\`\\`\\`json\n{\n  \"risk_item\": \"Test Entity\",\n  \"relationship_type\": \"InvalidType\",\n  \"finding_summary\": \"Some finding\"\n}\n\\`\\`\\``,\n        sources: []\n      };\n\n      const result = LinkupResponseParser.parseResponse(response, 'Test Entity');\n\n      expect(result.relationship_type).toBe('Unknown'); // Should default to Unknown for invalid types\n    });\n\n    it('should combine source URLs from JSON and API response', () => {\n      const response: LinkupApiResponse = {\n        answer: `\\`\\`\\`json\n{\n  \"risk_item\": \"Test Entity\",\n  \"relationship_type\": \"Direct\",\n  \"source_urls\": [\"https://json-source.com\"]\n}\n\\`\\`\\``,\n        sources: [\n          { name: 'API Source', url: 'https://api-source.com', snippet: 'test' }\n        ]\n      };\n\n      const result = LinkupResponseParser.parseResponse(response, 'Test Entity');\n\n      expect(result.source_urls).toContain('https://json-source.com');\n      expect(result.source_urls).toContain('https://api-source.com');\n    });\n\n    it('should extract organizations from text when JSON parsing fails', () => {\n      const response: LinkupApiResponse = {\n        answer: `The analysis found connections through Apple Inc and Microsoft Corporation. \nAdditionally, partnerships with IBM and Google LLC were identified.`,\n        sources: []\n      };\n\n      const result = LinkupResponseParser.parseResponse(response, 'Test Entity');\n\n      expect(result.intermediary_organizations.length).toBeGreaterThan(0);\n      expect(result.intermediary_organizations.some(org => \n        org.includes('Apple') || org.includes('Microsoft') || org.includes('IBM')\n      )).toBe(true);\n    });\n  });\n\n  describe('parseMultipleResponses', () => {\n    it('should parse multiple responses correctly', () => {\n      const responses: LinkupApiResponse[] = [\n        {\n          answer: `\\`\\`\\`json\n{\"risk_item\": \"Entity1\", \"relationship_type\": \"Direct\"}\n\\`\\`\\``,\n          sources: []\n        },\n        {\n          answer: `No relationship found`,\n          sources: []\n        }\n      ];\n\n      const riskEntities = ['Entity1', 'Entity2'];\n      const results = LinkupResponseParser.parseMultipleResponses(responses, riskEntities);\n\n      expect(results).toHaveLength(2);\n      expect(results[0].risk_item).toBe('Entity1');\n      expect(results[0].relationship_type).toBe('Direct');\n      expect(results[1].risk_item).toBe('Entity2');\n      expect(results[1].relationship_type).toBe('No Evidence Found');\n    });\n\n    it('should handle parsing failures gracefully', () => {\n      const responses: LinkupApiResponse[] = [\n        {\n          answer: 'Invalid response that will cause parsing to fail',\n          sources: [{ name: 'Test', url: 'https://test.com', snippet: 'test' }]\n        }\n      ];\n\n      const riskEntities = ['Entity1'];\n      const results = LinkupResponseParser.parseMultipleResponses(responses, riskEntities);\n\n      expect(results).toHaveLength(1);\n      expect(results[0].risk_item).toBe('Entity1');\n      expect(results[0].relationship_type).toBe('Unknown');\n      expect(results[0].source_urls).toContain('https://test.com');\n    });\n  });\n\n  describe('error handling', () => {\n    it('should throw error for invalid response format', () => {\n      expect(() => {\n        LinkupResponseParser.parseResponse(\n          { answer: '', sources: [] } as LinkupApiResponse,\n          'Test Entity'\n        );\n      }).toThrow('Invalid Linkup response: missing answer field');\n    });\n\n    it('should throw error for null response', () => {\n      expect(() => {\n        LinkupResponseParser.parseResponse(null as any, 'Test Entity');\n      }).toThrow('Invalid Linkup response: missing answer field');\n    });\n  });\n});