import { SSEService } from '../services/SSEService';\nimport { Response } from 'express';\nimport { ParsedSearchResult } from '../types/DatasetSearchTypes';\n\n// Mock Express Response\nclass MockResponse {\n  public headers: any = {};\n  public statusCode: number = 200;\n  public data: string[] = [];\n  public ended: boolean = false;\n  public listeners: { [event: string]: Function[] } = {};\n\n  writeHead(statusCode: number, headers: any) {\n    this.statusCode = statusCode;\n    this.headers = { ...this.headers, ...headers };\n  }\n\n  write(data: string) {\n    if (!this.ended) {\n      this.data.push(data);\n    }\n  }\n\n  end() {\n    this.ended = true;\n    this.emit('close');\n  }\n\n  on(event: string, callback: Function) {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [];\n    }\n    this.listeners[event].push(callback);\n  }\n\n  emit(event: string, ...args: any[]) {\n    if (this.listeners[event]) {\n      this.listeners[event].forEach(callback => callback(...args));\n    }\n  }\n\n  getWrittenData(): string {\n    return this.data.join('');\n  }\n\n  getLastEvent(): any {\n    const lastData = this.data[this.data.length - 1];\n    if (lastData && lastData.startsWith('data: ')) {\n      try {\n        return JSON.parse(lastData.replace('data: ', '').replace('\\n\\n', ''));\n      } catch {\n        return null;\n      }\n    }\n    return null;\n  }\n}\n\ndescribe('SSEService', () => {\n  let sseService: SSEService;\n  let mockResponse: MockResponse;\n\n  beforeEach(() => {\n    sseService = new SSEService();\n    mockResponse = new MockResponse();\n  });\n\n  afterEach(() => {\n    sseService.shutdown();\n  });\n\n  describe('createConnection', () => {\n    it('should create SSE connection with proper headers', () => {\n      const connectionId = sseService.createConnection(\n        mockResponse as any,\n        'exec-123',\n        'user-456'\n      );\n\n      expect(connectionId).toMatch(/^sse_\\d+_[a-z0-9]+$/);\n      expect(mockResponse.headers['Content-Type']).toBe('text/event-stream');\n      expect(mockResponse.headers['Cache-Control']).toBe('no-cache');\n      expect(mockResponse.headers['Connection']).toBe('keep-alive');\n      expect(mockResponse.headers['Access-Control-Allow-Origin']).toBe('*');\n    });\n\n    it('should send initial connection event', () => {\n      sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      const lastEvent = mockResponse.getLastEvent();\n      expect(lastEvent).toMatchObject({\n        stage: 'connection',\n        status: 'connected',\n        message: 'Connected to dataset search stream'\n      });\n    });\n\n    it('should track active connections', () => {\n      const initialCount = sseService.getActiveConnectionsCount();\n      \n      sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      expect(sseService.getActiveConnectionsCount()).toBe(initialCount + 1);\n    });\n  });\n\n  describe('sendProgress', () => {\n    it('should send progress update to execution connections', () => {\n      sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      sseService.sendProgress('exec-123', 5, 10, 'Processing items');\n      \n      const lastEvent = mockResponse.getLastEvent();\n      expect(lastEvent).toMatchObject({\n        stage: 'progress',\n        status: 'running',\n        message: 'Processing items',\n        current: 5,\n        total: 10\n      });\n    });\n\n    it('should use default message when none provided', () => {\n      sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      sseService.sendProgress('exec-123', 3, 8);\n      \n      const lastEvent = mockResponse.getLastEvent();\n      expect(lastEvent.message).toBe('Processing 3 of 8');\n    });\n  });\n\n  describe('sendNewResult', () => {\n    it('should send new search result event', () => {\n      sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      const mockResult: ParsedSearchResult = {\n        risk_item: 'Test Entity',\n        relationship_type: 'Direct',\n        finding_summary: 'Partnership found',\n        intermediary_organizations: [],\n        source_urls: ['https://example.com'],\n        completed_at: '2024-01-01T00:00:00.000Z'\n      };\n      \n      sseService.sendNewResult('exec-123', mockResult, 1, 10);\n      \n      const lastEvent = mockResponse.getLastEvent();\n      expect(lastEvent).toMatchObject({\n        stage: 'new_result',\n        status: 'success',\n        message: 'Found result for Test Entity',\n        current: 1,\n        total: 10,\n        data: mockResult\n      });\n    });\n  });\n\n  describe('sendCompletion', () => {\n    it('should send completion notification', () => {\n      sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      sseService.sendCompletion('exec-123', 5, 30000);\n      \n      const lastEvent = mockResponse.getLastEvent();\n      expect(lastEvent).toMatchObject({\n        stage: 'completed',\n        status: 'success',\n        message: 'Search completed. Found 5 results in 30000ms',\n        current: 5,\n        total: 5\n      });\n    });\n\n    it('should close connections after completion', (done) => {\n      sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      const initialCount = sseService.getActiveConnectionsCount();\n      \n      sseService.sendCompletion('exec-123', 5, 30000);\n      \n      // Connections should be closed after a delay\n      setTimeout(() => {\n        expect(sseService.getActiveConnectionsCount()).toBe(initialCount - 1);\n        done();\n      }, 2500); // Slightly more than the 2000ms delay\n    });\n  });\n\n  describe('sendError', () => {\n    it('should send error notification with Error object', () => {\n      sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      const error = new Error('Test error message');\n      sseService.sendError('exec-123', error, 3, 10);\n      \n      const lastEvent = mockResponse.getLastEvent();\n      expect(lastEvent).toMatchObject({\n        stage: 'error',\n        status: 'failed',\n        message: 'Search failed: Test error message',\n        current: 3,\n        total: 10,\n        error: 'Test error message'\n      });\n    });\n\n    it('should send error notification with string', () => {\n      sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      sseService.sendError('exec-123', 'Simple error message');\n      \n      const lastEvent = mockResponse.getLastEvent();\n      expect(lastEvent).toMatchObject({\n        stage: 'error',\n        status: 'failed',\n        message: 'Search failed: Simple error message',\n        error: 'Simple error message'\n      });\n    });\n  });\n\n  describe('sendCancellation', () => {\n    it('should send cancellation notification', () => {\n      sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      sseService.sendCancellation('exec-123');\n      \n      const lastEvent = mockResponse.getLastEvent();\n      expect(lastEvent).toMatchObject({\n        stage: 'error',\n        status: 'failed',\n        message: 'Search was cancelled by user',\n        error: 'SEARCH_CANCELLED'\n      });\n    });\n\n    it('should immediately close connections', () => {\n      sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      const initialCount = sseService.getActiveConnectionsCount();\n      \n      sseService.sendCancellation('exec-123');\n      \n      expect(sseService.getActiveConnectionsCount()).toBe(initialCount - 1);\n    });\n  });\n\n  describe('getExecutionConnections', () => {\n    it('should return connections for specific execution', () => {\n      sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      const mockResponse2 = new MockResponse();\n      sseService.createConnection(mockResponse2 as any, 'exec-456', 'user-789');\n      \n      const connections = sseService.getExecutionConnections('exec-123');\n      \n      expect(connections).toHaveLength(1);\n      expect(connections[0].executionId).toBe('exec-123');\n      expect(connections[0].userId).toBe('user-456');\n    });\n\n    it('should return empty array for non-existent execution', () => {\n      const connections = sseService.getExecutionConnections('non-existent');\n      expect(connections).toEqual([]);\n    });\n  });\n\n  describe('removeConnection', () => {\n    it('should remove connection and decrease count', () => {\n      const connectionId = sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      const initialCount = sseService.getActiveConnectionsCount();\n      \n      sseService.removeConnection(connectionId);\n      \n      expect(sseService.getActiveConnectionsCount()).toBe(initialCount - 1);\n    });\n  });\n\n  describe('closeExecutionConnections', () => {\n    it('should close all connections for an execution', () => {\n      // Create multiple connections for the same execution\n      const mockResponse2 = new MockResponse();\n      const mockResponse3 = new MockResponse();\n      \n      sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      sseService.createConnection(mockResponse2 as any, 'exec-123', 'user-789');\n      sseService.createConnection(mockResponse3 as any, 'exec-456', 'user-111');\n      \n      const initialCount = sseService.getActiveConnectionsCount();\n      \n      sseService.closeExecutionConnections('exec-123');\n      \n      // Should close 2 connections (both for exec-123)\n      expect(sseService.getActiveConnectionsCount()).toBe(initialCount - 2);\n      expect(mockResponse.ended).toBe(true);\n      expect(mockResponse2.ended).toBe(true);\n      expect(mockResponse3.ended).toBe(false);\n    });\n  });\n\n  describe('connection cleanup', () => {\n    it('should handle client disconnection', () => {\n      const connectionId = sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      const initialCount = sseService.getActiveConnectionsCount();\n      \n      // Simulate client disconnect\n      mockResponse.emit('close');\n      \n      expect(sseService.getActiveConnectionsCount()).toBe(initialCount - 1);\n    });\n\n    it('should handle connection errors', () => {\n      const connectionId = sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      const initialCount = sseService.getActiveConnectionsCount();\n      \n      // Simulate connection error\n      mockResponse.emit('error', new Error('Connection error'));\n      \n      expect(sseService.getActiveConnectionsCount()).toBe(initialCount - 1);\n    });\n  });\n\n  describe('shutdown', () => {\n    it('should close all connections and clean up', () => {\n      sseService.createConnection(mockResponse as any, 'exec-123', 'user-456');\n      \n      const mockResponse2 = new MockResponse();\n      sseService.createConnection(mockResponse2 as any, 'exec-456', 'user-789');\n      \n      sseService.shutdown();\n      \n      expect(sseService.getActiveConnectionsCount()).toBe(0);\n      expect(mockResponse.ended).toBe(true);\n      expect(mockResponse2.ended).toBe(true);\n    });\n  });\n});