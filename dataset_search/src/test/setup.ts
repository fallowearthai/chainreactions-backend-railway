// Jest setup file for global test configuration\n\n// Extend Jest timeout for integration tests\njest.setTimeout(30000);\n\n// Mock environment variables for testing\nprocess.env.NODE_ENV = 'test';\nprocess.env.SUPABASE_URL = 'https://test.supabase.co';\nprocess.env.SUPABASE_ANON_KEY = 'test-key';\nprocess.env.LINKUP_API_KEY = 'test-linkup-key';\nprocess.env.LINKUP_API_URL = 'https://api.linkup.so/v1/search';\n\n// Console log suppression for cleaner test output\nconst originalConsoleLog = console.log;\nconst originalConsoleError = console.error;\nconst originalConsoleWarn = console.warn;\n\nbeforeAll(() => {\n  // Suppress console outputs during tests unless explicitly needed\n  console.log = jest.fn();\n  console.error = jest.fn();\n  console.warn = jest.fn();\n});\n\nafterAll(() => {\n  // Restore console functions\n  console.log = originalConsoleLog;\n  console.error = originalConsoleError;\n  console.warn = originalConsoleWarn;\n});\n\n// Global test helpers\nglobal.testHelpers = {\n  createMockNROOrganization: (overrides = {}) => ({\n    id: 'test-id',\n    organization_name: 'Test Organization',\n    countries: ['China'],\n    aliases: [],\n    category: 'University',\n    metadata: {},\n    dataset_source: 'Canadian NRO',\n    ...overrides\n  }),\n  \n  createMockLinkupResponse: (overrides = {}) => ({\n    answer: `{\n      \"risk_item\": \"Test Entity\",\n      \"relationship_type\": \"Direct\",\n      \"finding_summary\": \"Test finding\",\n      \"intermediary_organizations\": [],\n      \"source_urls\": [\"https://example.com\"]\n    }`,\n    sources: [\n      {\n        name: 'Test Source',\n        url: 'https://example.com',\n        snippet: 'Test snippet'\n      }\n    ],\n    ...overrides\n  }),\n  \n  createMockParsedResult: (overrides = {}) => ({\n    risk_item: 'Test Entity',\n    relationship_type: 'Direct' as const,\n    finding_summary: 'Test finding summary',\n    intermediary_organizations: [],\n    source_urls: ['https://example.com'],\n    processing_time_ms: 1000,\n    completed_at: new Date().toISOString(),\n    ...overrides\n  }),\n  \n  createMockSearchHistoryItem: (overrides = {}) => ({\n    id: 'hist-123',\n    user_id: 'test-user',\n    target_institution: 'Test Institution',\n    keywords: [],\n    search_results: [],\n    execution_status: 'pending' as const,\n    execution_id: 'exec-123',\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    ...overrides\n  })\n};\n\n// Declare global types\ndeclare global {\n  var testHelpers: {\n    createMockNROOrganization: (overrides?: any) => any;\n    createMockLinkupResponse: (overrides?: any) => any;\n    createMockParsedResult: (overrides?: any) => any;\n    createMockSearchHistoryItem: (overrides?: any) => any;\n  };\n}