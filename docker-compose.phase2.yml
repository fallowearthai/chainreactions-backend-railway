# Phase 2 Docker Compose Configuration
# ChainReactions Backend - API Gateway + Service Separation
version: '3.8'

services:
  # Redis for service discovery and caching
  redis:
    image: redis:7-alpine
    container_name: chainreactions-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    networks:
      - chainreactions-network

  # API Gateway (Port 3000) - Main entry point
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    container_name: chainreactions-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - GATEWAY_PORT=3000
      - GATEWAY_HOST=0.0.0.0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=info
      - CORS_ENABLED=true
      - RATE_LIMITING=true
    depends_on:
      - redis
      - main-app
    volumes:
      - ./src:/app/src
      - ./scripts:/app/scripts
    restart: unless-stopped
    networks:
      - chainreactions-network
    command: npm run start:gateway

  # Main Application (Port 4000) - Lightweight services
  main-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chainreactions-main-app
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - PORT=4000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # Service discovery settings
      - SERVICE_NAME=main-app
      - SERVICE_HOST=main-app
      - SERVICE_PORT=4000
      # API Keys (use your actual keys)
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - LINKUP_API_KEY=${LINKUP_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - GMAIL_USER=${GMAIL_USER}
      - GMAIL_APP_PASSWORD=${GMAIL_APP_PASSWORD}
    depends_on:
      - redis
    volumes:
      - ./src:/app/src
    restart: unless-stopped
    networks:
      - chainreactions-network
    command: npm run start:main

  # Dataset Search Service (Port 4001) - First service to separate
  dataset-search:
    build:
      context: .
      dockerfile: Dockerfile.dataset-search
    container_name: chainreactions-dataset-search
    ports:
      - "4001:4001"
    environment:
      - NODE_ENV=development
      - PORT=4001
      - SERVICE_NAME=dataset-search
      - SERVICE_HOST=dataset-search
      - SERVICE_PORT=4001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # API Keys specific to dataset search
      - LINKUP_API_KEY=${LINKUP_API_KEY}
      - LINKUP_API_KEY_2=${LINKUP_API_KEY_2}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    depends_on:
      - redis
    volumes:
      - ./src:/app/src
    restart: unless-stopped
    networks:
      - chainreactions-network

  # Entity Relations Service (Port 4002) - Heavy computation service
  entity-relations:
    build:
      context: ./services/entity-relations
      dockerfile: Dockerfile
    container_name: chainreactions-entity-relations
    ports:
      - "4002:4002"
    environment:
      - NODE_ENV=production
      - PORT=4002
      - SERVICE_NAME=entity-relations
      - SERVICE_HOST=entity-relations
      - SERVICE_PORT=4002
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # API Keys specific to entity relations
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - BRIGHT_DATA_API_KEY=${BRIGHT_DATA_API_KEY}
      - BRIGHT_DATA_SERP_ZONE=${BRIGHT_DATA_SERP_ZONE}
      - GEMINI_MODEL=gemini-2.5-flash
      - API_TIMEOUT=30000
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - chainreactions-network
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 4002 || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s

  # Dataset Matching Service (Port 4003) - Computation intensive
  dataset-matching:
    build:
      context: ./services/dataset-matching-port4003
      dockerfile: Dockerfile
    container_name: chainreactions-dataset-matching
    ports:
      - "4003:4003"
    environment:
      - NODE_ENV=production
      - PORT=4003
      - SERVICE_NAME=dataset-matching
      - SERVICE_HOST=dataset-matching
      - SERVICE_PORT=4003
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # Database Configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      # Algorithm Configuration
      - CACHE_TTL_MINUTES=60
      - MAX_CACHE_SIZE=1000
      - DEFAULT_SIMILARITY_THRESHOLD=0.6
      - MAX_RESULTS_PER_QUERY=20
      - ENABLE_GEOGRAPHIC_MATCHING=true
      - GEOGRAPHIC_BOOST_FACTOR=1.2
      # Performance Settings
      - MAX_BATCH_SIZE=100
      - CONCURRENT_REQUESTS_LIMIT=10
      - PROCESSING_TIMEOUT_MS=30000
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - chainreactions-network
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 4003 || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s

volumes:
  redis_data:
    driver: local

networks:
  chainreactions-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16